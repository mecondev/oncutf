# Cursor Rules for oncutf Project

## Project Overview
This is a Python desktop application built with PyQt5 for batch file renaming with metadata support. The codebase follows specific conventions and patterns that must be maintained.

## Core Principles
- Always respond in Greek language (except code, comments, and docstrings which must be in English)
- Use friendly, chatty tone in Greek
- Ask for user approval before making any code changes
- Never delete loggers, docstrings, comments, or change code structure unless explicitly asked
- Prefer stable solutions over clever ones
- Follow step-by-step approach with user confirmation

## Code Standards

### Python Style
- Use type annotations everywhere
- Follow PEP8 naming conventions (constants in UPPERCASE)
- Add module-level docstrings where missing
- All docstrings and comments in English
- Never address linter errors unless explicitly asked
- Use descriptive names for files, classes, and methods

### PyQt5 Specifics
- Maintain consistent visual styling across QTreeView widgets and QComboBox dropdowns
- Use the project-wide global timer instead of QTime.singleShot
- Follow the established theme engine pattern for colors and styling
- Preserve existing delegate patterns for custom painting
- Use established QSS (Qt Style Sheets) patterns from utils/theme_engine.py

### File Structure
- Keep imports organized (core.pyqt_imports for Qt imports)
- Use absolute paths over relative paths when possible
- Maintain the utils/ directory structure for shared components
- Follow the widgets/ directory pattern for UI components

### Git Workflow
- Use git auto commit workflow: `git add .` followed by `git commit --amend -m <descriptive message>`
- Never run `git pull` automatically to avoid breaking local changes
- Ask before performing git operations

### Testing and Debugging
- Use ruff as the linter (run `ruff` command)
- Read files thoroughly before making changes
- Use parallel tool calls when gathering information
- Compare with backups when debugging complex issues

## Project-Specific Rules

### UI Components
- Maintain color consistency: use table colors (table_text, table_selection_text, etc.) across all tree views
- Preserve chevron icon behavior in tree views
- No alternating lines in combobox dropdowns or context menus
- Keep full-row hover effects consistent across components

### Metadata Tree
- setRootIsDecorated(True) for expand/collapse arrows
- Use project theme colors for all states (normal, hover, selected, selected+hover)
- Maintain text color changes while keeping icons stable

### File Operations
- Use __file__ for project root detection (already implemented correctly)
- Follow cross-platform path handling patterns
- Maintain user config directory standards (Windows: APPDATA, Linux: XDG_CONFIG_HOME)

## Do Not
- Create documentation files unless explicitly requested
- Make uneducated guesses about fixes
- Loop more than 3 times on linter error fixes
- Change working code without explicit request
- Create temporary files without cleaning them up
- Run git pull automatically

## Communication
- Always explain changes clearly in Greek
- Use backticks for file, class, and function names
- Present proposed changes and wait for "Yes" confirmation
- Use \( \) for inline math, \[ \] for block math in markdown
- Cite code regions using: ```startLine:endLine:filepath format

## Memory Management
- Update memories when user corrects information
- Delete contradicted memories rather than updating them
- Never create memories for implementation plans or completed migrations
- Always cite memories when using them: [[memory:MEMORY_ID]]
