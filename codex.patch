diff --git a/docs/oncutf_module_docstrings.md b/docs/oncutf_module_docstrings.md
index c1b281f0ae81b54c5cd42e5f2efb61525251d1e9..140bae91c98164b756d80e6268a424293e68465d 100644
--- a/docs/oncutf_module_docstrings.md
+++ b/docs/oncutf_module_docstrings.md
@@ -55,53 +55,54 @@ Date: 2025-05-01

 This utility module handles the logic for selecting and loading files
 from one or more folders into the application's data model.

 It supports recursive directory scanning, file type filtering, and
 preparation of file data for use in the oncutf renaming system.

 ## `utils/filename_validator.py`
 Module: filename_validator.py

 Author: Michael Economou
 Date: 2025-05-01

 This utility module provides logic for validating filenames across
 different operating systems. It checks for invalid characters, reserved
 names, and other constraints to ensure safe and portable file naming.

 Used by oncutf to prevent errors during batch renaming.

 ## `widgets/metadata_worker.py`
 Module: metadata_worker.py

 Author: Michael Economou
 Date: 2025-05-01

-This module defines a worker thread or task responsible for retrieving
-metadata from files asynchronously. It decouples metadata extraction
-from the UI thread to keep the application responsive.
+This module defines a background worker located in the `widgets` package
+responsible for retrieving metadata from files asynchronously. Running
+in its own thread decouples metadata extraction from the UI thread and
+keeps the application responsive.

 Typically used in the oncutf application to run exiftool or similar
 metadata extractors in the background and emit signals when data is ready.

 ## `main.py`
 Module: main.py

 Author: Michael Economou
 Date: 2025-05-01

 This module serves as the entry point for the oncutf application.
 It sets up logging, initializes the Qt application with a stylesheet, creates
 and displays the main window, and starts the application's main event loop.

 ## `main_window.py`
 Module: main_window.py

 Author: Michael Economou
 Date: 2025-05-01

 This module defines the MainWindow class, which implements the primary user interface
 for the oncutf application. It includes logic for loading files from folders, launching
 metadata extraction in the background, and managing user interaction such as rename previews.

 ## `models/file_item.py`
diff --git a/docs/oncutf_module_docstrings.md b/docs/oncutf_module_docstrings.md
index c1b281f0ae81b54c5cd42e5f2efb61525251d1e9..140bae91c98164b756d80e6268a424293e68465d 100644
--- a/docs/oncutf_module_docstrings.md
+++ b/docs/oncutf_module_docstrings.md
@@ -171,26 +172,25 @@ multiple configuration categories, automatic backups, and thread-safe operations

 The module includes ConfigCategory base class for type-safe configuration handling,
 WindowConfig, FileHashConfig, and AppConfig classes for specific application needs,
 and JSONConfigManager as the main configuration management class.

 ## `utils/path_utils.py`
 Module: path_utils.py

 Author: Michael Economou
 Date: 2025-06-20

 This utility module provides cross-platform path normalization and comparison functions.
 It addresses path separator inconsistencies between different operating systems and
 ensures reliable path-based operations throughout the application.

 Key functions include normalize_path(), paths_equal(), and find_file_by_path()
 for consistent path handling across Windows and Unix-like systems.

 ## Related Documentation

 - **Database System**: [Database Quick Start](database_quick_start.md) | [Database System](database_system.md)
 - **Safe Operations**: [Safe Rename Workflow](safe_rename_workflow.md)
 - **Case-Sensitive Renaming**: [Case-Sensitive Rename Guide](case_sensitive_rename_guide.md)
 - **Progress Tracking**: [Progress Manager System](progress_manager_system.md)
 - **Configuration**: [JSON Config System](json_config_system.md)
-
