[project]
name = "oncutf"
version = "0.1.0"
description = "Batch File Renamer with EXIF Metadata Support"
authors = [
    {name = "Michael Economou", email = "info@oncut.gr"}
]
readme = "README.md"
requires-python = ">=3.9"
dependencies = [
    "PyQt5>=5.15.0",
    "Pillow>=9.0.0",
    "charset-normalizer>=3.0.0"
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-qt>=4.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0"
]

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

# --------------------------
# mypy configuration
# --------------------------
[tool.mypy]
python_version = "3.9"
strict = true
ignore_missing_imports = true
warn_unused_configs = true
warn_return_any = true
warn_redundant_casts = true
exclude = '.*(backups|\.cache|temp|reports)/'  # Global exclude, only one allowed

[[tool.mypy.overrides]]
module = ["PyQt5.*"]
ignore_missing_imports = true
ignore_errors = true

# --------------------------
# Ruff configuration
# --------------------------
[tool.ruff]
target-version = "py39"
line-length = 100
fix = true
exclude = ["backups", ".cache", "temp", "reports"]

[tool.ruff.lint]
select = ["E", "F", "I", "N"]
ignore = ["E501", "N802", "F403", "F405"]

[tool.ruff.lint.isort]
force-single-line = false
combine-as-imports = true

# --------------------------
# Pytest
# --------------------------
[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --tb=short"
testpaths = ["tests"]
qt_api = "pyqt5"

# --------------------------
# Coverage
# --------------------------
[tool.coverage.run]
source = [".", "widgets", "models", "modules", "utils"]
omit = [
    "tests/*",
    "venv/*",
    "*/site-packages/*",
    "setup.py",
    "conftest.py"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]

# ----------------------------------------
# Legacy Pylint configuration (optional)

# [tool.pylint.main]
# load-plugins = ["pylint.extensions.docparams"]
# extension-pkg-whitelist = ["PyQt5"]

# [tool.pylint.messages_control]
# disable = [
#     "missing-module-docstring", "missing-class-docstring", "missing-function-docstring",
#     "too-many-arguments", "too-many-locals", "too-many-instance-attributes",
#     "too-many-statements", "too-many-branches", "too-many-public-methods",
#     "too-few-public-methods", "invalid-name", "attribute-defined-outside-init",
#     "no-member", "c-extension-no-member", "import-error", "no-name-in-module",
#     "unused-argument", "broad-except", "bare-except"
# ]

# [tool.pylint.typecheck]
# generated-members = [
#     "PyQt5.*", "Qt.*", "QApplication.*", "QWidget.*", "QMainWindow.*",
#     "QTableWidget.*", "QTreeView.*", "QHeaderView.*", "QAbstractItemView.*"
# ]

# ----------------------------------------
